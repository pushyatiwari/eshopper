// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Checkout should be called with 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <div>
        <form
          class="form-container"
        >
          <div
            class="form-element"
          >
            <p>
              NAME:
            </p>
             
            <input
              aria-describedby="name-format"
              aria-required="true"
              data-testid="input-name"
              name="formname"
              pattern="[A-Za-z-0-9]+\\\\s[A-Za-z-'0-9]+"
              required=""
              type="text"
              value=""
            />
            <br />
          </div>
          <div
            class="form-element"
          >
            <p>
              EMAIL:
            </p>
            <input
              data-testid="input-email"
              id="formemail"
              name="formemail"
              pattern="[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$"
              required=""
              type="email"
              value=""
            />
            <br />
          </div>
          <div
            class="form-element"
          >
            <p>
              ADDRESS:
            </p>
            <input
              data-testid="input-address"
              name="formaddress"
              type="text"
              value=""
            />
            <br />
          </div>
          <div
            class="form-element"
          >
            <p>
              PHONE:
            </p>
            <input
              data-testid="input-phone"
              name="formphone"
              pattern="^\\\\d{10}$"
              required=""
              type="text"
              value=""
            />
          </div>
          <br />
          <button
            type="submit"
          >
            Checkout
          </button>
        </form>
      </div>
      <h1
        class="order-not-placed"
      >
        Your Order is placed successfully!
      </h1>
    </div>
  </body>,
  "container": <div>
    <div>
      <form
        class="form-container"
      >
        <div
          class="form-element"
        >
          <p>
            NAME:
          </p>
           
          <input
            aria-describedby="name-format"
            aria-required="true"
            data-testid="input-name"
            name="formname"
            pattern="[A-Za-z-0-9]+\\\\s[A-Za-z-'0-9]+"
            required=""
            type="text"
            value=""
          />
          <br />
        </div>
        <div
          class="form-element"
        >
          <p>
            EMAIL:
          </p>
          <input
            data-testid="input-email"
            id="formemail"
            name="formemail"
            pattern="[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$"
            required=""
            type="email"
            value=""
          />
          <br />
        </div>
        <div
          class="form-element"
        >
          <p>
            ADDRESS:
          </p>
          <input
            data-testid="input-address"
            name="formaddress"
            type="text"
            value=""
          />
          <br />
        </div>
        <div
          class="form-element"
        >
          <p>
            PHONE:
          </p>
          <input
            data-testid="input-phone"
            name="formphone"
            pattern="^\\\\d{10}$"
            required=""
            type="text"
            value=""
          />
        </div>
        <br />
        <button
          type="submit"
        >
          Checkout
        </button>
      </form>
    </div>
    <h1
      class="order-not-placed"
    >
      Your Order is placed successfully!
    </h1>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
